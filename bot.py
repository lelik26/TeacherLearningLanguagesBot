# bot.py
import logging

from telegram import Update
from telegram import BotCommand

import config as cfg
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from handlers.translation_handler import TranslationHandlers
from handlers.voice_handler import choose_voice, voice_selected, generate_voice
from config import TELEGRAM_BOT_TOKEN
from services.voices import get_all_voices
from utils.logger import setup_logger

logger = setup_logger(__name__)

class LanguageTeacherBot:
    def __init__(self):
        self.app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        self.translation_handlers = TranslationHandlers()

    def setup_handlers(self):
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        self.app.add_handler(CommandHandler("start", self.start))  # <-- –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        self.app.add_handler(CommandHandler("clear", self.clear_chat))
        self.app.add_handler(CommandHandler("help", self.help_command))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ (ConversationHandler)
        self.app.add_handler(self.translation_handlers.get_conversation_handler())

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
        self.app.add_handler(CommandHandler("voice", choose_voice))
        self.app.add_handler(MessageHandler(filters.TEXT & filters.Regex(f"^({'|'.join([v['name'] for v in cfg.VOICES])})$"),
                                       voice_selected))
        #self.app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^–î–∞–ª—å—à–µ$"), next_page))  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        #self.app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^–ù–∞–∑–∞–¥$|üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –≥–æ–ª–æ—Å–∞"), back_page))  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        self.app.add_handler(MessageHandler(filters.TEXT, generate_voice))

    async def start(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —è–∑—ã–∫–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å–æ –º–Ω–æ–π:\n\n"
            "üìñ /translate - –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞.\n"
            "üîä /voice - –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞.\n"
            "üóë /clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é.\n"
            "‚ÑπÔ∏è /help - –ø–æ–º–æ—â—å."
        )
        await update.message.reply_text(welcome_text)

    async def clear_chat(self, update: Update, context: CallbackContext):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–º"""
        await update.message.reply_text("üí°–ß—Ç–æ–±—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç, —É–¥–∞–ª–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é –∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π! üöÄüóë –û—á–∏—â–∞—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞...")
        context.user_data.clear()  # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –≥—Ä—É–ø–ø–µ
        try:
            await update.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    async def help_command(self, update: Update, context: CallbackContext):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ"""
        help_text = (
            "‚ÑπÔ∏è **–ü–æ–º–æ—â—å**\n\n"
            "–Ø —Ç–≤–æ–π —è–∑—ã–∫–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
            "üìñ /translate - –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞.\n"
            "üîä /voice - –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞.\n"
            "üóë /clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞.\n"
            "‚ÑπÔ∏è /help - –ø–æ–º–æ—â—å –∏ —Å–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n\n"
            "üí¨ **–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π**: [–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É](https://t.me/i_VAN_79)"
        )
        await update.message.reply_text(help_text, parse_mode="Markdown", disable_web_page_preview=True)

    async def set_bot_commands(self, app: Application):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –≤ Telegram"""
        commands = [
            BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand("translate", "–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞"),
            BotCommand("voice", "–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"),
            BotCommand("clear", "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"),
            BotCommand("help", "–ü–æ–º–æ—â—å –∏ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
        ]
        await app.bot.set_my_commands(commands)

    def run(self):
        self.setup_handlers()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        self.app.run_polling()


if __name__ == "__main__":
    bot = LanguageTeacherBot()
    bot.run()
