from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import CallbackContext, CommandHandler, MessageHandler, filters
import config as cfg
from services.voices import generate_audio  # –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤ –∏–∑ config.py
voices = cfg.VOICES


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_voice_keyboard():
    buttons = [[v["name"]] for v in voices]  # –ö–∞–∂–¥–æ–µ –∏–º—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /voice –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞
async def choose_voice(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /voice - –≤—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞"""
    keyboard = create_voice_keyboard()
    await update.message.reply_text("üéô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def voice_selected(update: Update, context: CallbackContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≥–æ–ª–æ—Å"""
    selected_voice = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥–æ–ª–æ—Å –≤ —Å–ø–∏—Å–∫–µ
    if selected_voice not in [v["name"] for v in voices]:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    context.user_data["selected_voice"] = selected_voice  # –•—Ä–∞–Ω–∏–º –≤—ã–±–æ—Ä –≤ user_data
    await update.message.reply_text(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ–ª–æ—Å: üîä üìç{selected_voice}üìç.\n üí¨–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏:",
                                    reply_markup=ReplyKeyboardRemove())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
async def generate_voice(update: Update, context: CallbackContext):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–∑–≤—É—á–∫–∏ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É"""
    user_id = update.message.from_user.id
    selected_voice = context.user_data.get("selected_voice")

    if not selected_voice:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å —Å –ø–æ–º–æ—â—å—é /voice")
        return

    # –ü–æ–ª—É—á–∞–µ–º ID –≥–æ–ª–æ—Å–∞
    voice_id = next(v['id'] for v in voices if v['name'] == selected_voice)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
    audio_file = generate_audio(update.message.text, voice_id)

    with open(audio_file, 'rb') as audio:
        await update.message.reply_voice(voice=audio)
